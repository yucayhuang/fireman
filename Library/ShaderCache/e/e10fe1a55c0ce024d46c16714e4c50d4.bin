function(){var a=b.customDefinesText||"";a=a.replace(/;/g,""),a=a.trim(),a&&-1===b.customDefines.indexOf(a)&&b.customDefines.push(a),b.customDefinesText=""},b.removeCustomDefine=function(a){b.customDefines.splice(a,1)},b.addScene=function(){var a=b.scenesText||"";"/"===a.substr(0,1)&&(a=a.substr(1,a.length-1)),(a=a.trim())&&("Assets/"!==a.substr(0,7)&&(a="Assets/"+a),-1===a.indexOf(".unity")&&(a+=".unity"),a&&-1===b.scenes.indexOf(a)&&b.scenes.push(a),b.scenesText="")},b.removeScene=function(a){b.scenes.splice(a,1)},b.canContinueToNextStep=function(){return!0},b.nextStep=function(){var a=b.customDefines.join("; "),c={settings:{advanced:{unity:{preExportMethod:b.preExportMethod,postExportMethod:b.postExportMethod,preBuildScript:b.preBuildScript,postBuildScript:b.postBuildScript,scriptingDefineSymbols:a,playerExporter:{sceneList:b.scenes,buildOptions:b.buildOptions}}}}};b.executableName&&(c.settings.executablename=b.executableName),(b.splitBinaryBuild||b.hadSplitBinaryBuild)&&(c.settings.advanced.unity.playerSettings={Android:{useAPKExpansionFiles:b.splitBinaryBuild}}),(b.hadAndroidBuildSystem||"legacy"!==b.androidBuildSystem)&&(c.settings.advanced.unity.editorUserBuildSettings={androidBuildSystem:b.androidBuildSystem}),b.saveBuildTarget(c)}}]),angular.module("ut.cloudbuild.setup.assetbundles",["ut.cloudbuild.setup.advanced"]).controller("ProjectSetupTargetAssetBundlesCtrl",["$scope","$controller",function(a,b){b("ProjectSetupTargetAdvancedCtrl",{$scope:a});var c=a.target.settings.advanced||{};a.buildAssetBundles=a.getValueFromPath(c,"unity.assetBundles.buildBundles",!1),a.bundlesBasePath=a.getValueFromPath(c,"unity.assetBundles.basePath",""),a.copyToStreamingAssets=a.getValueFromPath(c,"unity.assetBundles.copyToStreamingAssets",!1);var d=a.getValueFromPath(c,"unity.assetBundles.buildAssetBundleOptions","");a.compression="",a.buildAssetBundleOptions={},_.each(d.split(","),function(b){if("ChunkBasedCompression"===(b=b.trim())||"UncompressedAssetBundle"===b)return void(a.compression=b);a.buildAssetBundleOptions[b]=!0}),a.copyBundlePatterns=_.uniq(a.getValueFromPath(c,"unity.assetBundles.copyBundlePatterns",[])),a.addFilePattern=function(){var b=a.copyFilePatternText||"";b.replace(/[\n]+/g,""),a.copyBundlePatterns.indexOf(b)<0&&a.copyBundlePatterns.push(b),a.copyFilePatternText=""},a.removeFilePattern=function(b){var c=a.copyBundlePatterns.indexOf(b);a.copyBundlePatterns.splice(c,1)},a.nextStep=function(){var b=a.bundlesBasePath||"";b=b.replace(/^\/+/,""),a.buildAssetBundleOptions=_.omitBy(a.buildAssetBundleOptions,function(a,b){return!a||_.isEmpty(b)});var c=Object.keys(a.buildAssetBundleOptions);a.compression&&c.push(a.compression);var d={settings:{advanced:{unity:{assetBundles:{buildBundles:a.buildAssetBundles,copyToStreamingAssets:a.copyToStreamingAssets,copyBundlePatterns:a.copyBundlePatterns,buildAssetBundleOptions:c.join(","),basePath:b}}}}};a.saveBuildTarget(d)}}]),angular.module("ut.cloudbuild.setup").controller("ProjectSetupTargetBasicCtrl",["$stateParams","$scope","$state","$timeout","modals","setupConstants","cloudBuildService","buildConstants","scmUtils","unityVersionService",function(a,b,c,d,e,f,g,h,i,j){function k(a){b.needsCredentials()?c.go("generic.build.project.setup.target.credentials",{targetId:a.buildtargetid,new:!0}):b.isEditing?c.go("generic.build.project.targets"):b.startBuilds(a.buildtargetid,!1)}b.constants=_.merge({},f);var l=a.targetId;if(l)b.isEditing=!0;else{b.isEditing=!1;var m=b.target&&b.target.settings&&b.target.settings.unityVersion;if(b.target={platform:"",name:"",enabled:!0,settings:{autoBuild:!0,remoteCacheStrategy:"library",unityVersion:m,scm:{}}},a.platform){b.target.settings.unityVersion||j.getLatestValidVersion(a.platform).then(function(a){b.target.settings.unityVersion=a}),b.target.platform=a.platform;var n=_.find(f.platforms,{value:a.platform}),o=n?n.name:a.platform;b.target.name="Default "+o}}i.getScmBranches(b),b.gitBranchModal=function(){e.gitBranchSelect(b.project,b.target).result.then(function(a){b.target.settings.scm.branch=a})},b.svnFolderModal=function(){e.svnFolderSelect(b.project,b.target).result.then(function(a){b.target.settings.scm.branch=a})},b.p4ClientModal=function(){e.p4ClientSelect(b.project,b.target).result.then(function(a){b.target.settings.scm.client=a})},b.needsCredentials=function(){var a=b.target;return("android"===a.platform||"ios"===a.platform)&&(!b.isEditing||(!a.credentials||!a.credentials.signing||!a.credentials.signing.credentialid))},b.WebGlSupportCheck=function(){if("webgl"!==b.target.platform)return!0;var a=_.get(b,"target.settings.unityVersion","0.0.0");return j.isUnityVersionSupported(a,"5_0_0")},b.canContinueToNextStep=function(){var a=!1;if("p4"!==b.project.settings.scm.type&&"collab"!==b.project.settings.scm.type){a=!_.get(b,"target.settings.scm.branch",null)}if("p4"===b.project.settings.scm.type){if(!b.target.settings.scm.client)return!1}else if(a||!b.WebGlSupportCheck())return!1;return b.target.platform&&b.target.name},b.nextStep=function(){var a=null;a=b.isEditing?g.projects.updateBuildTarget(b.project.orgid,b.project.projectid,b.target.buildtargetid,b.target):g.projects.createBuildTarget(b.project.orgid,b.project.projectid,b.target);var c=e.progress("Saving...");a.then(function(a){b.updateBuildTargetInScope(l,a),k(a)}).catch(function(a){e.error("Failed to update build target: "+a.data.error)}).finally(function(){c.close()})}}]),angular.module("ut.cloudbuild.setup.platform-select",["ut.cloudbuild.setup.advanced","ui.router","ut.cloudbuild.setup.constants"]).value("userAgent",navigator.userAgent).controller("ProjectSetupPlatformSelectCtrl",["$stateParams","$scope","setupConstants","userAgent","unityVersionService",function(a,b,c,d,e){var f=e.userAgent.matchRegex(d);b.platforms=_.filter(c.platforms,function(a){return!(f&&a.version&&!e.isSupported(f,a.version.min,a.version.max,{alpha:!0,beta:!0}))&&!a.hidden})}]),angular.module("ut.cloudbuild.setup").directive("svnpath",["$q","$timeout","cloudBuildService",function(a,b,c){return{require:"ngModel",link:function(b,d,e,f){f.$asyncValidators.svnpath=function(d,e){var f=a.defer();return c.projects.scm.svnListFolders(b.project.orgid,b.project.projectid,e).then(function(a){f.resolve()}).catch(function(a){f.reject()}),f.promise}}}}]),angular.module("ut.cloudbuild.setup").controller("ProjectSetupTargetEditCtrl",["$stateParams","$scope","$state","$timeout","modals","cloudBuildService","$q",function(a,b,c,d,e,f,g){var h=g.when(b.buildTargets);(angular.isUndefined(b.buildTargets)||0===b.buildTargets.length)&&(h=f.projects.getBuildTargets(b.orgId,b.projectId)),h.then(function(d){b.buildTargets=d;var f=a.targetId,g=_.find(b.buildTargets,{buildtargetid:f});g?b.target=_.merge({},g):e.error("Build target '"+f+"' does not exist!").result.then(function(){c.go("generic.build.project.targets")})})}]),angular.module("ut.cloudbuild.setup.target-tests",["ut.cloudbuild.setup.advanced"]).controller("ProjectSetupTargetTestsCtrl",["$stateParams","$scope","$controller",function(a,b,c){c("ProjectSetupTargetAdvancedCtrl",{$scope:b});var d=b.target.settings.advanced||{};b.runUnitTests=b.getValueFromPath(d,"unity.runUnitTests",!1),b.unitTestMethod=b.getValueFromPath(d,"unity.unitTestMethod","UnityTest.Batch.RunUnitTests"),b.failedUnitTestFailsBuild=b.getValueFromPath(d,"unity.failedUnitTestFailsBuild",!1),b.nextStep=function(){var a={settings:{advanced:{unity:{runUnitTests:b.runUnitTests,unitTestMethod:b.unitTestMethod,failedUnitTestFailsBuild:b.failedUnitTestFailsBuild}}}};b.saveBuildTarget(a)}}]),angular.module("ut.cloudbuild.setup").directive("validatesubdirectory",function(){return{restrict:"A",require:"ngModel",link:function(a,b,c,d){function e(a){d.$setValidity("subdirectoryNewline",!0),d.$setValidity("subdirectoryCharacters",!0),d.$setValidity("subdirectoryParent",!0),d.$setValidity("subdirectorySource",!0);var c=b.val();c&&0!==c.length&&(/[\r\n\f]/.test(c)?d.$setValidity("subdirectoryNewline",!1):/[$`\\!"*@#]/.test(c)?d.$setValidity("subdirectoryCharacters",!1):/(?:^|\/)\.\.\//.test(c)?d.$setValidity("subdirectoryParent",!1):/(?:^|\/)\.\//.test(c)&&d.$setValidity("subdirectorySource",!1))}e(d.$viewValue),a.$watch(function(){return d.$viewValue},e)}}}),angular.module("ut.cloudbuild.setup").directive("fileModel",["$parse",function(a){return{restrict:"A",link:function(b,c,d){var e=a(d.fileModel),f=e.assign;c.bind("change",function(){b.$apply(function(){f(b,c[0].files[0])})})}}}]),angular.module("ut.cloudbuild.setup.constants",[]).constant("setupConstants",{platforms:[{name:"Please choose a platform target",value:"",icon:"",hidden:!0},{name:"iOS",value:"ios",icon:"unityicon unityicon-os-ios"},{name:"Android",value:"android",icon:"unityicon unityicon-os-android"},{name:"Web Player",value:"webplayer",icon:"unityicon unityicon-os-webplayer",version:{max:"5.3.99"}},{name:"WebGL",value:"webgl",icon:"unityicon unityicon-os-webgl"},{name:"Mac desktop 32-bit",value:"standaloneosxintel",icon:"unityicon unityicon-os-osx-32"},{name:"Mac desktop 64-bit",value:"standaloneosxintel64",icon:"unityicon unityicon-os-osx-64"},{name:"Mac desktop Universal",value:"standaloneosxuniversal",icon:"unityicon unityicon-os-osx-U"},{name:"Windows desktop 32-bit",value:"standalonewindows",icon:"unityicon unityicon-os-win-32"},{name:"Windows desktop 64-bit",value:"standalonewindows64",icon:"unityicon unityicon-os-win-64"},{name:"Linux desktop 32-bit",value:"standalonelinux",icon:"unityicon unityicon-os-linux-32"},{name:"Linux desktop 64-bit",value:"standalonelinux64",icon:"unityicon unityicon-os-linux-64"},{name:"Linux desktop Universal",value:"standalonelinuxuniversal",icon:"unityicon unityicon-os-linux-U"}],cachingStrategies:[{name:"Off",value:"none"},{name:"Cache Library Directory",value:"library"},{name:"Cache Entire Project",value:"workspace"}]}),angular.module("ut.cloudbuild.setup").provider("utilsService",function(){this.$get=["$q","$timeout",function(a,b){function c(a,d,e,f){if(a[d])f.resolve();else{var g=c.bind(null,a,d,e,f);b(g,e)}}var d={};return d.waitForScopeValueToLoad=function(b,d,e){var f=a.defer();return c(b,d,e||500,f),f.promise},d}]}).directive("utTooltipToggle",function(){return{restrict:"E",replace:!0,template:'<a class="tooltip-toggle">?</a>',link:function(a,b,c){b.bind("click",function(){$(this).parents(".form-group").find(".tooltip").toggleClass("tooltip-visible")})}}}),angular.module("ut.cloudbuild.upload",["ut.cloudbuild.setup","ut.filters","ui.router"]).controller("cbUploadController",["$scope","$state","setupConstants","$rootScope","cbUploadHelper",function(a,b,c,d,e){var f=this;a.$watch(function(){return f.progress.status},function(a){a.cancel&&(f.cancelButtonLabel=a.cancel),a.message&&(f.progress.message=a.message)}),f.verifyInProgress=function(){f.progress.aborted&&(f.progress.uploadProcess&&f.progress.uploadProcess.abort&&f.progress.uploadProcess.abort(),f.cancelHandler())},f.$onInit=function(){f.progress=e.getUploadTracker(a.build,a.errorHandler,f.verifyInProgress),f.cancelHandler=a.cancelHandler,f.build=a.build,f.errorHandler=a.errorHandler,f.artifact={},a.build&&(f.artifact.platform=a.build.platform,f.artifact.label=a.build.label),f.platforms=_.filter(c.platforms,function(a){return!a.hidden})},f.$onInit(),f.startBuilds=function(){return f.progress.startBuilds(b.params.orgId,b.params.projectId,f.artifact)},f.upload=function(){f.progress.upload(b.params.orgId,b.params.projectId,f.artifact,a.projectGuid)},f.verifyFileType=function(a){return e.verifyFileType(a,f.artifact)},f.calculatePercent=function(a,b){angular.merge(f.progress,e.calculatePercent(f.progress.startUploadAmount,a,b))},f.changeStatus=function(a,b){f.progress.value+=a,f.progress.message=b},f.cancel=function(){if(f.progress.inProgress)return void(f.progress.aborted=!0);f.cancelHandler()}}]).directive("cbUpload",function(){return{restrict:"E",controller:"cbUploadController",controllerAs:"uploadBuild",templateUrl:"ut.cloudbuild.upload/upload.html"}}).directive("verifyFileExtension",function(){
return{require:"ngModel",link:function(a,b,c,d){var e=a.$parent.uploadBuildForm;d.$validators.fileExtension=function(b){return!!d.$isEmpty(b)||a.$parent.uploadBuild.verifyFileType(e.platform.$viewValue)}}}}).directive("verifyRequiredFile",function(){return{require:"ngModel",link:function(a,b,c,d){d.$validators.requiredFile=function(a){return!d.$isEmpty(a)}}}}),angular.module("ut.cloudbuild.upload").run(["$templateCache",function(a){"use strict";a.put("ut.cloudbuild.upload/upload.html",'<form name="uploadBuildForm">\n    <md-toolbar class="cb-upload-header">\n      <div class="md-toolbar-tools">\n        <h2 ng-if="!uploadBuild.build" class="modal-title" translate>Upload a Build</h2>\n        <h2 ng-if="uploadBuild.build" class="modal-title" translate>Resume Upload {{uploadBuild.build.build}}</h2>\n      </div>\n    </md-toolbar>\n    <md-dialog-content class="cb-upload-body" layout="row">\n        <div class="md-dialog-content" ng-if="!uploadBuild.progress.inProgress && !uploadBuild.progress.finished" layout-fill layout="column">\n\n            <p translate>Upload builds you made on your own computer to your Unity Cloud Storage to archive them\n                or\n                submit them to app stores.\n                They will appear in your Cloud Build history.</p>\n\n            <div class="row">\n                <div class="form-group col-sm-6">\n                    <label for="artifact-file">File (apk, ipa, or zip)</label>\n                    <input class="form-control" ng-model="uploadBuild.artifact.file" id="artifact-file"\n                           ng-required\n                           ng-change="uploadBuildForm.platform.$validate()"\n                           type="file"\n                           name="file"\n                           accept=".zip,.ipa,.apk"\n                           formats="zip,ipa,apk"\n                           verify-required-file\n                           required />\n                    <div ng-show="uploadBuildForm.file.$touched" ng-messages="uploadBuildForm.file.$error"\n                       class="error form-tip" role="alert" ng-class="{errortip: !uploadBuildForm.file.$valid}">\n                    <div ng-message="requiredFile">A file is required.</div>\n                  </div>\n                </div>\n                <div class="form-group col-sm-6">\n                    <label for="artifact-platform"